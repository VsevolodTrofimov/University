#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage[warn]{mathtext}
\usepackage{indentfirst}
\usepackage{amsfonts}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language russian
\language_package default
\inputencoding utf8
\fontencoding T2A
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Дисклеймер.
\end_layout

\begin_layout Standard
Автор не несет ответственности за любой ущерб, причиненный Вам при использовании
 данного документа.
 Автор напоминает, что данный документ может содержать ошибки и опечатки,
 недостоверную и/или непроверенную информацию.
 Если Вы желаете помочь в развитии проекта или сообщить об ошибке/опечатке/неточ
ности:
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "GitHub проекта"
target "https://github.com/vahriin/University"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Автор в ВК"
target "https://vk.com/vahriin"

\end_inset


\end_layout

\begin_layout Standard
Внимание: данный документ не поддерживается и поддерживаться не будет! Сообщения
 об ошибках НЕ рассматриваются, пулл реквесты НЕ принимаются! Если Вы хотите
 поддерживать этот документ - форкните проект на Github.
 Благодарю за понимание.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\align center
Последовательности выполнения 
\end_layout

\begin_layout Standard
a = 1, b = 2, a+b — последовательность.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Fortran — 1957;
\end_layout

\begin_layout Standard
ALGOL60 — 1958, 60, 64;
\end_layout

\begin_layout Standard
PL1 — 1962-64;
\end_layout

\begin_layout Standard
ALGOL68 — 1968-1974;
\end_layout

\begin_layout Standard
PASCAL — 1972;
\end_layout

\begin_layout Standard
C — 1972, 1978; (связан с разработкой UNIX)
\end_layout

\begin_layout Standard
Ada — 1974, 1976;
\end_layout

\begin_layout Standard
LISP — 1958; 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Условие:
\end_layout

\begin_layout Standard
if (a>b)
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
	
\end_layout

\end_inset


\shape italic
операторы;
\end_layout

\begin_layout Standard
else
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
	
\end_layout

\end_inset


\shape italic
операторы;
\shape default
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Циклы:
\end_layout

\begin_layout Standard
1)
\end_layout

\begin_layout Standard
while (a>b)
\end_layout

\begin_layout Standard
{
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
	
\end_layout

\end_inset


\shape italic
операторы;
\end_layout

\begin_layout Standard
} 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
2)
\end_layout

\begin_layout Standard
do
\end_layout

\begin_layout Standard
{
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
	
\end_layout

\end_inset


\shape italic
операторы;
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
while (a>b); 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
float M[100]; - элементы от 0 до 99;
\end_layout

\begin_layout Standard
for (i = 0; i < 100; i++)
\end_layout

\begin_layout Standard
{
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
	
\end_layout

\end_inset


\shape italic
операторы;
\end_layout

\begin_layout Standard
} 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $a+=b=\oplus$
\end_inset

 — разобраться;
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Переменные цикла: i, j, k, l, m.
\end_layout

\begin_layout Standard
Конец второй лекции.
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
Операторы управления С 
\end_layout

\begin_layout Standard
if, switch - ну, короче, все знают синтаксис.
\end_layout

\begin_layout Standard
Лексема - единица транслятора.
 135 - 3 литеры, одна лексема.
 -135 - 4 литеры, 2 лексемы (- и 135).
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
break работает также в циклах, прерывая их.
\end_layout

\begin_layout Standard
continue запускает следующую итерацию, игнорируя последующие команды.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Декомпозиция — разделение сложных структур на более простые.
\end_layout

\begin_layout Standard
/* комментарий */ — комментарий.
\end_layout

\begin_layout Standard
Юнит-тест (unit test) — проверка отдельного модуля.
\end_layout

\begin_layout Standard
Функция void называется процедурой.
\end_layout

\begin_layout Standard
Допустимо приведение целого к вещественному, но не наоборот.
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
Указатели 
\end_layout

\begin_layout Standard
см.
 2.cpp
\end_layout

\begin_layout Standard
Функции - см.
 3.cpp
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
Структуры 
\end_layout

\begin_layout Standard
ad hoc — 
\begin_inset Quotes ard
\end_inset

для этой цели
\begin_inset Quotes ald
\end_inset

 статика — (относительно бесплатная) динамика — (дорогая) 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
Машина Тьюринга 
\end_layout

\begin_layout Standard
Машина Тьюринга - это бесконечная лента.
 Имеется головка, которая смотрит на одну из ячеек ленты.
 И есть конечный алфавит 
\begin_inset Formula $\{a-z\}$
\end_inset

 и пустая ячейка.
 Также есть конечный набор состояний 
\begin_inset Formula $\{S_{0},...S_{k}\}$
\end_inset

 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Конец второй лекции.
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
Функции.
 Повторение 
\end_layout

\begin_layout Standard
Возможна передача функции нескольких параметров.
\end_layout

\begin_layout Standard
Для изменения значения внешней переменной требуется использовать передачу
 параметров по ссылке.
 (передачу ссылки в качестве параметра).
\end_layout

\begin_layout Standard
Передача массива в качестве параметра функции — см.
 5.cpp
\end_layout

\begin_layout Standard
По мере возможности сохраняйте все переменные как локальные — (и это называется
 инкапсуляция)
\end_layout

\begin_layout Standard
\align center
Понятие сложности алгоритма.
 
\end_layout

\begin_layout Standard
Сложность алгоритма поиска наибольшего элемента массива M[n] — n;
\end_layout

\begin_layout Standard
Сложность алгоритма сортировки — 
\begin_inset Formula $n^{2}$
\end_inset

;
\end_layout

\begin_layout Standard
Сложность алгоритма сортировки пузырьком — 
\begin_inset Formula $\frac{n^{2}}{2}$
\end_inset

;
\end_layout

\begin_layout Standard
Сложность алгоритма сортировки слиянием — 
\begin_inset Formula $n\log_{2}n$
\end_inset

 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Разобьем массив из 1000 элементов на 256 списков.
 Каждый из таких списков будет иметь одинаковый хеш 
\begin_inset Formula $x\rightarrow hash(x)$
\end_inset

 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Бэктрекинг.
\end_layout

\begin_layout Standard
Задача представляется в виде дерева решений.
\end_layout

\begin_layout Standard
Спускаемся по узлам дерева до получения фэйла.
 Если фэйл получен, поднимаемся на один узел выше и проверяем другую ветку
 решений.
 В случае ошибки - повторить :) Но это решение говенное.(с)Терехов 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Конец третьей лекции
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
Строки 
\end_layout

\begin_layout Standard
Строка вида "abc" представляется в памяти компьютера лексеммы 4 символов:
 a, b, c, "конец строки".
 Адрес строки — адрес первого элемента строки.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Кодировки:
\end_layout

\begin_layout Standard
1) Основная с англ.
 символами: ASCII;
\end_layout

\begin_layout Standard
2) Общепринятая в Linux и MacOS: UTF-8 (UTF-16);
\end_layout

\begin_layout Standard
3) В Windows: CP1251.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
UTF-8 состоит из 8 битов.
 Если 1 бит равен 0, то кодировка аналогична ASCII.
 Если 1 бит равен 1, а второй — 0, то добавляется еще один байт, содержащий
 коды региональных символов.
\end_layout

\begin_layout Standard
a[2:5] — взятие подстроки.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Поиск подстроки в строке:
\end_layout

\begin_layout Standard
Конечный автомат или матрица состояний.
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
Данные в памяти компьютера.
 Биты, байты, слова.
 
\end_layout

\begin_layout Standard
В 1969-1970 годах самой крупной IT-корпорацией была компания IBM с оборотом
 $18 млрд.
\end_layout

\begin_layout Standard
Вот она и ввела следующие стандарты:
\end_layout

\begin_layout Standard
байт — 8 bit.
\end_layout

\begin_layout Standard
H — 16 bit (полуслово) — всегда кончается 0
\end_layout

\begin_layout Standard
W — 32 bit (слово) — кончается 00
\end_layout

\begin_layout Standard
DW — 64 bit (двойное слово) — кончается 000.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
Представление числовых данных и системы счисления 
\end_layout

\begin_layout Standard
\begin_inset Formula $1000_{2}=8_{10}$
\end_inset

 — прямой код.
\end_layout

\begin_layout Standard
\begin_inset Formula $1001_{2}=-1_{10}$
\end_inset

 — отрицательный элемент в прямом коде.
 Ясен перец, его никто не юзает, ибо неудобно отличать положительный элемент
 от отрицательного.
\end_layout

\begin_layout Standard
\begin_inset Formula $1111$
\end_inset

 — дополнительный код.
 Здесь первый бит играет роль знака.
 Таким образом, вычитание 
\begin_inset Formula $a-b$
\end_inset

 можно осуществлять, переводя 
\begin_inset Formula $b$
\end_inset

 в обратный код и складывая данные переменные.
\end_layout

\begin_layout Standard
Перевод из прямого кода в дополнительный: инвертировать прямой код и прибавить
 единицу.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Представление чисел с плавающей точкой:
\end_layout

\begin_layout Standard
Два стандарта: для 32 бит и 64 бит.
\end_layout

\begin_layout Standard
Разберем 32 битный стандарт.
\end_layout

\begin_layout Standard
Нулевой бит — знак.
 С 1 по 8 — порядок.
 С 9 по 31 — мантисса.
\end_layout

\begin_layout Standard
Представление: 
\begin_inset Formula $1.мантисса*2^{порядок}$
\end_inset

.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Для 64 бит:
\end_layout

\begin_layout Standard
Нулевой бит — знак.
 1, 2, 3 биты фиксированы.
 С 4 по 9 — порядок.
 Все остальное — мантисса.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Нормализованное число: 
\begin_inset Formula $\pm exp>0$
\end_inset

 и затем любой набор битов.
\end_layout

\begin_layout Standard
Ненормализованное число: 
\begin_inset Formula $\pm0$
\end_inset

 и затем любые символы не равные 0.
\end_layout

\begin_layout Standard
Ноль: 
\begin_inset Formula $\pm0$
\end_inset

 и нули.
\end_layout

\begin_layout Standard
\begin_inset Formula $\infty$
\end_inset

: 
\begin_inset Formula $\pm1111...$
\end_inset

 и затем нули.
\end_layout

\begin_layout Standard
NaN (Not a Number): 
\begin_inset Formula $\pm111...1$
\end_inset

 и затем ненулевые символы.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Конец пятой лекции
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
Операционные системы.
 Обзор.
 
\end_layout

\begin_layout Standard
COCOM — ограничение на поставку американцами в СССР электронно-вычислительной
 техники.
\end_layout

\begin_layout Standard
Но наши все равно умудрились своровать IBM/360 и стали выпускать его под
 названием ЕС ЭВМ.
\end_layout

\begin_layout Standard
Потом еще были:
\end_layout

\begin_layout Standard
1370 — РЯД 1;
\end_layout

\begin_layout Standard
HP — CM 1, CM2;
\end_layout

\begin_layout Standard
PDPII — CM3, CM4;
\end_layout

\begin_layout Standard
Но в этот момент англичане вышли с предложением продать нам ICL1900.
 Но увы, СССР заблокировала эту инициативу.
\end_layout

\begin_layout Standard
Каким-то образом все же две ICL1900 с полной документацией попали в СССР.
\end_layout

\begin_layout Standard
Инженеры долго не могли разобраться в этой документации из-за проблем с
 терминологией.
 Но в конце концов плюнули и стали именовать все термины по-английски.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Функции операционной системы:
\end_layout

\begin_layout Standard
1) Планировщик.
 Он должен понять, сколько задач, сколько каждая требует процессорного времени
 и раскидать так, как нужно.
\end_layout

\begin_layout Standard
2) Управление памятью: MFT — фиксированный захват памяти, MVT — динамический.
 Каждой задаче нужно какое-то число памяти и ОС должна её выделять.
\end_layout

\begin_layout Standard
3) Управление временем.
\end_layout

\begin_layout Standard
4) Управление вводом-выводом (одна из главнейших функций).
 Процессор посылает в канал (channel) команду SIO, канал читает с носителя,
 процессор в это время работает над другой задачей.
 Закончив чтение, channel посылает процессору прерывание I/O и он продолжает
 работу с полученными данными.
\end_layout

\begin_layout Standard
Допустим, в памяти два блока.
 Читаем с первого блока и в это время нихрена не делаешь.
 Закончив чтение, ты начинаешь работать с полученными данными, а в это время
 происходит чтение из другого блока и т.
 д.
 Два буфера.
 В один вводятся данные, из другого выводятся.
 Это называется буферизацией (BSAM).
\end_layout

\begin_layout Standard
Когда мы печатаем printf(block), он передается spooling'у.
 Writer постоянно опрашивает spooling и при появлении там данных начинает
 их запись на диск.
\end_layout

\begin_layout Standard
5) Системы реального времени:
\end_layout

\begin_layout Standard
Монитор — часть ОС.
\end_layout

\begin_layout Standard
pic — программа управления чем-либо мелким, например, железнодорожной стрелкой.
 Её задача всего лишь снять данные с датчиков и в зависимости от них перевести
 стрелку.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Операционные системы бывают:
\end_layout

\begin_layout Standard
1) однопрограммные и многопрограммные (в данный момент может быть активна
 одна или много программ).
\end_layout

\begin_layout Standard
2) однопользовательские и многопользовательские (первая предоставляет интерфейс
 лишь одному пользователю, а вторая способна обрабатывать несколько пользователь
ских сеансов таким образом, чтобы каждый пользователь был уверен, что единственн
ый работает за данной машиной).
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center

\size larger
Введение в распределенные вычисления 
\end_layout

\begin_layout Standard

\size larger
Распределенное вычисление — вычисление какой-либо сложной программы посредством
 её разбиения на несколько малых кусков и их вычисление на нескольких разных
 машинах.
\end_layout

\begin_layout Standard

\size larger
\begin_inset Formula $\bigtriangleup U=\frac{\partial U}{\partial t}$
\end_inset

 
\begin_inset Formula $\frac{\partial^{2}U}{\partial x^{2}}+\frac{\partial^{2}U}{\partial y^{2}}$
\end_inset


\end_layout

\begin_layout Standard

\size larger
Чтобы такую дуру решить, нужно решить много линейных уравнений Лапласа 
\begin_inset Formula $\bigtriangleup U=\varnothing,t=0,\bigtriangleup t,2\bigtriangleup t,...$
\end_inset


\end_layout

\begin_layout Standard

\size larger
Распараллеливание процессов имеет сложность 
\begin_inset Formula $Const\frac{сложность\ задачи}{число\ процессов}$
\end_inset


\end_layout

\begin_layout Standard

\size larger
Мужик из Оксфорда McColl придумал систему BSP для вычисления перемножения
 матриц, такую, что Const = 1.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Конец шестой лекции
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Есть такая операционная система RTEMS — для ракет.
 Абсолютно свободная ОС.
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center

\size larger
Человеко-машинное взаимодействие.
 
\end_layout

\begin_layout Standard

\size larger
Первыми интерфейсами взаимодействия были пультами с большим числом лампочек,
 которыми выводились двоичные данные.
 Также была печать результатов при помощи перфолент
\end_layout

\begin_layout Standard

\size larger
Потом появились широкие устройства печати наподобие пишущих машинок, имевшие
 28 литер.
\end_layout

\begin_layout Standard

\size larger
Постепенно пользовательский интерфейс обогащался, поскольку разрабы начали
 понимать, что не человек для машины, а машина для человека.
 Интерфейс должен быть очеловечен.
\end_layout

\begin_layout Standard

\size larger
Революция совершилась с появлением цифровых дисплеев.
 Теперь можно было взаимодействовать с машиной на уровне "человеческого"
 диалога.
 До дисплеев были только циферки и лампочки, а теперь появились буковки.
 Кстати, буковки были английские (потому что русские еще не были нарисованы/вотк
нуты в компьютеры).
 Кстати, устройств, различающих большие и маленькие буквы тоже не было.
\end_layout

\begin_layout Standard

\size larger
Следующая революция произошла, когда появились графические дисплеи.
 Появилась возможность выводить кривые, прямые и различные образы.
 Картинки и образы лучше воспринимаются большинством людей.
 Поэтому блок-схемы понятнее большинству людей, нежели сухой код.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Человек видит только пользовательский интерфейс, но не знает "потрохов"
 программы, поэтому 99% успешности продукта — пользовательский интерфейс.
\end_layout

\begin_layout Standard

\size larger
Диалоговые системы должны что-то отвечать на запросы пользователя.
 Лучшими считаются прогресс-бар и извещения о прогрессе выполнения операций.
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center

\size larger
Методология разработки программного обеспечения.
 
\end_layout

\begin_layout Standard

\size larger
Главный принцип программирования — "разделяй и властвуй", то есть, структурная
 декомпозиция.
\end_layout

\begin_layout Standard

\size larger
1) Сначала нужно произвести декомпозицию сложной системы на подсистемы.
\end_layout

\begin_layout Standard

\size larger
2) Оценить сложность каждой подсистемы.
\end_layout

\begin_layout Standard

\size larger
3) Подсчитать 
\begin_inset Formula $суммы\pm10\%$
\end_inset

 на каждую подсистему, сложить их...
\end_layout

\begin_layout Standard

\size larger
4) И умножить на два!
\end_layout

\begin_layout Standard

\size larger
Умножать на два нужно потому, что интеграционный процесс (процесс сборки
 системы из подсистем) очень сложен и может занять времени и денег больше,
 чем написание самих подсистем.
\end_layout

\begin_layout Standard

\size larger
feasibility study — оценка осуществимости.
\end_layout

\begin_layout Standard

\size larger
Итак, к нам пришел заказчик, хочет дать бабла за программу.
 Мы говорим: давайте мы заключим с вами такой договор: я посажу 3 лучших
 системных аналитиков, они за 3 месяца решат, можно ли сделать эту программу,
 после этого мы поговорим подробнее.
 Стоить это будет столько-то.
\end_layout

\begin_layout Standard

\size larger
Scope — содержимое (объем) работы.
 За это и заплатит заказчик.
 Если он согласится с вами работать, то вперед.
 Если нет — пусть торгуется или идет с этим скоупом к другой компании.
\end_layout

\begin_layout Standard

\size larger
Технология программирования — книжка на сайте Терехова.
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Конец шестой лекции.
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Quality assurance (QA).
\end_layout

\begin_layout Standard

\size larger
На зачете тем, кому попадется 12 вопрос, следует сказать, что:
\end_layout

\begin_layout Standard

\size larger
1) Мы говорим только о больших программных комплексах (мелкие программки
 лесом), которые пишутся большими коллективами, и когда мы говорим про методолог
ию, нужно говорить о планировании работы, принятии, обеспечении стандартов
 и правильной документации.
 Не бывает единой методологии в программировании.
 Методология начинается с построения коллектива, затем способ разработки.
 Прежде всего нужно сделать декомпозицию, при этом модули, на которые вы
 разделяете программу, должны быть небольшими.
 Проверить, поддерживают ли используемые технологии подобную декомпозицию.
 Декомпозиция — основной принцип проектирования (не программирования!)
\end_layout

\begin_layout Standard

\size larger
2) Нужно представить систему в виде образов.
 Но проблема в том, что не все понимают, что ты имел в виду под тем или
 иным образом.
 Это дело решили стандартизировать.
 И три конкурента: Буч, Рэмбо и Якобсон придумали собственные use case.
 И в 1996 году их троих купила одна компания, заперла на острове и не выпускала,
 пока они не согласовали собственные разработки в одну.
 И таким образом получился язык UML.
 И там стандартизированы способы проектирования.
 Короче, прогуглим :)
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Тестирование и отладка.
\end_layout

\begin_layout Standard

\size larger
Отладка — поиск ошибок (debugging).
\end_layout

\begin_layout Standard

\size larger
Прежде чем запускать программу с тестом, нужно понять, какой ответ выдаст
 этот тест при исполнении программы.
\end_layout

\begin_layout Standard

\size larger
Тесты гоняют для того, чтобы найти ошибку, а не для того, чтобы проверить
 правильность выполнения программы.
 Хороший тест — это тест, на котором программа сломалась.
 А если тест прошел — то это говно-тест.
\end_layout

\begin_layout Standard

\size larger
QA должен быть адвокатом пользователя и не взаимодействовать с разработчиками.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Структурное программирование — постепенная декомпозиция программы с использовани
ем заранее ограниченного числа конструкций (while, if, разделение на функции
 и так далее).
\end_layout

\begin_layout Standard

\size larger
Цикл проверять минимум три раза: без захода программы в цикл, с одним заходом,
 с двумя и так далее.
\end_layout

\begin_layout Standard

\size larger
Лучший способ отладки — чтение программ.
 Еще лучший способ — описать действия этой программы в статье (и пускай
 эта статья будет для себя).
\end_layout

\begin_layout Standard

\series bold
\size larger
Аксиомы программирования
\series default
:
\end_layout

\begin_layout Standard

\size larger
1) В каждой программе есть ошибка.
\end_layout

\begin_layout Standard

\size larger
2) Если в программе нет ошибок, то ошибка в алгоритме.
\end_layout

\begin_layout Standard

\size larger
3) Если нет ошибок ни в программе, ни в алгоритме, то такая программа никому
 нафиг не нужна!
\end_layout

\begin_layout Standard

\size larger
При получении задачи нужно думать не о том, как ты напишешь программу, а
 о том, как ты её будешь тестировать.
 (test first).
\end_layout

\begin_layout Standard

\size larger
Итоги:
\end_layout

\begin_layout Standard

\size larger
1) Тесты нужно писать до программы!
\end_layout

\begin_layout Standard

\size larger
2) При написании программы нужно использовать принципы структурного программиров
ания (и никаких goto!).
\end_layout

\begin_layout Standard

\size larger
3) Нужно заранее готовиться к отладочной работе! (расставить контрольные
 точки и понять, что будет делать программа при этом и только после этого
 нажимать кнопку 
\begin_inset Quotes ard
\end_inset

Пуск
\begin_inset Quotes ald
\end_inset

).
\end_layout

\begin_layout Standard

\size larger
model checking — суть в том, что мы берем программу и по ней строим модель
 по некоторым предикатам (
\begin_inset Quotes ard
\end_inset

никогда в будущем не случится...
\begin_inset Quotes ald
\end_inset

, 
\begin_inset Quotes ard
\end_inset

обязательно произойдет...
\begin_inset Quotes ald
\end_inset

, 
\begin_inset Quotes ard
\end_inset

может произойти при условии...
\begin_inset Quotes ald
\end_inset

) Это называется темпоральной логикой (TL).
 Она отличается от математической тем, что в темпоральной логике присутствует
 течение времени, которое способно влиять на верность того или иного утверждения.
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center

\size larger
Среды разработки.
 Инструменты тестирования и отладки 
\end_layout

\begin_layout Standard

\size larger
IDE — интегрированное средство разработки (среда программирования, которая
 позволяет тебе программировать быстрее).
\end_layout

\begin_layout Standard

\size larger
В чем состоит интегрированность? Мы раньше говорили о простых программах,
 состоящих из одного модуля.
 А может быть множество модулей, из которых требуется собрать с помощью
 makefile единую сущность.
\end_layout

\begin_layout Standard

\size larger
(int a; real b; nest "f1"; char c; ...)
\end_layout

\begin_layout Standard

\size larger
egg "f1" = (b := a; nest "f2")
\end_layout

\begin_layout Standard

\size larger
egg "f2" = (...)
\end_layout

\begin_layout Standard

\size larger
DSL — предметно-ориентированный язык (язык программирования, приближенный
 к какой-либо предметной области).
\end_layout

\begin_layout Standard

\size larger
Проблема DSL в том, что для каждого DSL требуется создать собственную IDE,
 собственный генератор кода и т.д.
\end_layout

\begin_layout Standard

\size larger
Метатехнология — это произвольный процесс воздействия на технологию, преобразующ
ий ее от некоторого начального к некоторому конечному состоянию.
\end_layout

\begin_layout Standard

\size larger
Пример метатехнологии: QReal, TRIK studio.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
ResqueWare
\end_layout

\begin_layout Standard

\size larger
Реижиниринг — переработка старых программ с помощью современных технологий.
\end_layout

\begin_layout Standard

\size larger
Регрессионное тестирование — тестирование старыми тестами (которые уже проходили
) программы после внесения изменений (например, после внесения изменений
 в 50-ю функцию может перестать работать работавшая ранее 20 функция).
\end_layout

\begin_layout Standard

\size larger
CVS (Control Version System) — система "разделения труда" между программистами.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Метрика сложности программы содержит:
\end_layout

\begin_layout Standard

\size larger
1) Количество строк кода;
\end_layout

\begin_layout Standard

\size larger
2) Число функций;
\end_layout

\begin_layout Standard

\size larger
3) Число баз данных и таблиц;
\end_layout

\begin_layout Standard

\size larger
4) Число окошек;
\end_layout

\begin_layout Standard

\size larger
5) Число ветвлений;
\end_layout

\begin_layout Standard

\size larger
6)
\end_layout

\begin_layout Standard

\size larger
Метрика Маккейба (не путать с Макеевым) :)
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Доказательство корректности программы.
\end_layout

\begin_layout Standard

\size larger
Метод флойда (возможно).
\end_layout

\begin_layout Standard

\size larger
model checking — суть в том, что мы берем программу и по ней строим модель
 по некоторым предикатам (
\begin_inset Quotes ard
\end_inset

никогда в будущем не случится...
\begin_inset Quotes ald
\end_inset

, 
\begin_inset Quotes ard
\end_inset

обязательно произойдет...
\begin_inset Quotes ald
\end_inset

, 
\begin_inset Quotes ard
\end_inset

может произойти при условии...
\begin_inset Quotes ald
\end_inset

) Это называется темпоральной логикой (TL).
 Она отличается от математической тем, что в темпоральной логике присутствует
 течение времени, которое способно влиять на верность того или иного утверждения.
\end_layout

\begin_layout Standard

\size larger
Дырка в том, что мы проверяем корректность не программы, а модели.
 А кто поручится за то, что модель соответствует программе? Никто.
\end_layout

\begin_layout Standard

\size larger
model checking архиважен для систем реального времени, но он не панацея,
 потому что построение модели по программе производится людьми.
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center

\size larger
Социальный контекст компьютинга и так далее.
 
\end_layout

\begin_layout Standard

\size larger
Чем отличается профессиональный программист от чайника:
\end_layout

\begin_layout Standard

\size larger
– Он думает о результатах (о будущем своей программы).
\end_layout

\begin_layout Standard

\size larger
– Профессиональный программист работает за деньги :) (то есть его работа
 кому-то нужна)
\end_layout

\begin_layout Standard

\size larger
– Профессионал соблюдает кодекс этики.
\end_layout

\begin_layout Standard

\size larger
– Профессионал охотно делится своими знаниями с соседями.
\end_layout

\begin_layout Standard

\size larger
– Входит в профессиональные ассоциации (IEEE, ACM, Руссофт)
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Авторские права (воровать нехорошо).
\end_layout

\begin_layout Standard

\size larger
IP — интеллектуальная собственность.
\end_layout

\begin_layout Standard

\size larger
Во всех контрактах первое утверждение — что данная программа принадлежит
 заказчику (не тебе).
\end_layout

\begin_layout Standard

\size larger
Моральные права (ваша фамилия может быть упомянута в программе).
 Да, это собственность компании, но упомянуть автора они могут (а желательно
 — чтобы были обязаны).
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Конец седьмой лекции.
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center

\size larger
ИСТОРИЯ ЭВМ И ПРОГРАММИРОВАНИЯ 
\end_layout

\begin_layout Standard

\size larger
Стандартная схема ЭВМ (см.
 фото) появилась в 1836 году (Чарльз Бэббидж)
\end_layout

\begin_layout Standard

\size larger
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell multicolumn="1" alignment="none" valignment="top" topline="true" leftline="true" rightline="true" usebox="none" special="c">
\begin_inset Text

\begin_layout Plain Layout

\size larger
Процессор
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="none" valignment="top" topline="true" leftline="true" rightline="true" usebox="none" special="c">
\begin_inset Text

\begin_layout Plain Layout

\size larger
Память
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="none" valignment="top" topline="true" leftline="true" rightline="true" usebox="none" special="c">
\begin_inset Text

\begin_layout Plain Layout

\size larger
Ввод/Вывод
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="none" valignment="top" topline="true" leftline="true" rightline="true" usebox="none" special="c">
\begin_inset Text

\begin_layout Plain Layout

\size larger
Шина
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="none" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none" special="c">
\begin_inset Text

\begin_layout Plain Layout

\size larger
Регистры
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="none" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none" special="c">
\begin_inset Text

\begin_layout Plain Layout

\size larger
Управление
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\size larger
Аугуста Лавлейнс — первая программистка мира
\end_layout

\begin_layout Standard

\size larger
Первые компьтеры XXI века:
\end_layout

\begin_layout Standard

\size larger
(1916) 1917 — триггер (катодное реле) (М.
 А.
 Бонч-Бруевич рулит!)
\end_layout

\begin_layout Standard

\size larger
1939 — ABC, (Д.
 Атанасов, К.
 Бэрри)
\end_layout

\begin_layout Standard

\size larger
1941 — Z3 (К.
 Цузе) (уже двоичная машина).
 Была целая серия (Z1, Z2, Z3), но Z3 первая, документация на которую была
 опубликована
\end_layout

\begin_layout Standard

\size larger
1943 — Mark I (Г.
 Эйкен, Т.
 Уотсон-младший)
\end_layout

\begin_layout Standard

\size larger
1946 — ENIAC (Д.
 Моучли, Д.
 Эккерт, Г.
 Голдстайн)
\end_layout

\begin_layout Standard

\series bold
\size larger
Гарвардская архитектура:
\series default
 командная память и память данных физически разделена
\end_layout

\begin_layout Standard

\series bold
\size larger
Триггер
\series default
 — электронное устройство (схему см.
 на фото) (по-русски — 
\series bold
катодное реле
\series default
) (и ещё раз — изобрёл М.
 А.
 Бонч-Бруевич!)
\end_layout

\begin_layout Standard

\size larger
Д.
 Атанасов изобрёл первый в мире сумматор, но патент был отозван судом США
\end_layout

\begin_layout Standard

\size larger
Джон (Иоганн) фон Нейман — венгерско-американский учёный еврейского происхождени
я, автор (ну почти автор) современной архитектуры компьютера
\end_layout

\begin_layout Standard

\series bold
\size larger
Машина фон Неймана:
\series default
 командная память и память данных в одном устройстве
\end_layout

\begin_layout Standard

\size larger
Алан Тьюринг, помимо теоретической деятельности, занимался практическими
 проектами, в частности, расшифровкой перехваченных сообщений вермахта
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Конец XIX века — российский учёный шведского происхождения Однер изобрёл
 арифмометр и наладил его производство (Терехову, а значит и нам, оно неинтересн
о)
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
1.
 Ламповые ЭВМ 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Первые советские ЭВМ:
\end_layout

\begin_layout Standard

\size larger
1951 — МЭСМ, (С.А.
 Лебедев)
\end_layout

\begin_layout Standard

\size larger
1952 — М-1 (И.С.
 Брук) (свидетельство от 4.12.1948) (уже полупроводниковая машина)
\end_layout

\begin_layout Standard

\size larger
1952 — БЭСМ (С.А.
 Лебедев)
\end_layout

\begin_layout Standard

\size larger
1953 — 
\begin_inset Quotes ard
\end_inset

Стрела
\begin_inset Quotes ald
\end_inset

 (Ю.Я.
 Базилевский, Б.И.
 Рамеев)
\end_layout

\begin_layout Standard

\size larger
1953 — М-2 (М.А.
 Карцев)
\end_layout

\begin_layout Standard

\size larger
1958 — БЭСМ-2 (В.А.
 Мельников)
\end_layout

\begin_layout Standard

\size larger
1958 — М-20 (С.А.
 Лебедев, М.К.
 Сулим, М.Р.
 Шура-Бура)
\end_layout

\begin_layout Standard

\size larger
Сергей Александрович Лебедев (1902–1974)
\end_layout

\begin_layout Standard

\size larger
Исаак Семёнович Брук (1902–1974)
\end_layout

\begin_layout Standard

\size larger
Юрий Яковлевич Базилеский (1912–1983)
\end_layout

\begin_layout Standard

\size larger
Башир Искандерович Рамеев (1918–1994)
\end_layout

\begin_layout Standard

\size larger
Михаил Александрович Карцев (1923-1983)
\end_layout

\begin_layout Standard

\size larger
Владимир Александрович Мельников (1928–1993) 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Первые советские полупроводниковые ЭВМ:
\end_layout

\begin_layout Standard

\size larger
БЭСМ-3М, БЭСМ-4, М-220, М-220М, М-222
\end_layout

\begin_layout Standard

\size larger
1956 — М-3 (Н.Я.
 Матюхин)
\end_layout

\begin_layout Standard

\size larger
1963 — Минск-2/22 (В.В.
 Пржиялковский)
\end_layout

\begin_layout Standard

\size larger
1968 — Минск-32 (В.В.
 Пржиялковский)
\end_layout

\begin_layout Standard

\size larger
Николай Яковлевич Матюхин (1927–1984) 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Оказывается, что наиболее удобная система с точки зрения теории информации
 — система с основанием 
\begin_inset Formula $e$
\end_inset

 (да-да, число Эйлера)
\end_layout

\begin_layout Standard

\size larger
1959 — 
\begin_inset Quotes ard
\end_inset

Сетунь
\begin_inset Quotes ald
\end_inset

 (троичная ЭВМ, единственная в мире) (Н.П.
 Брусенцов)
\end_layout

\begin_layout Standard

\size larger
Николай Петрович Брусенцов (1925–)
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Конец восьмой лекции.
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center

\size larger
Объектно-ориентированное программирование 
\end_layout

\begin_layout Standard

\size larger
Структурное программирование — разбиение задачи на малые подзадачи и решение
 их по отдельности и композиция их в одну.
\end_layout

\begin_layout Standard

\size larger
Однако повторное использование кода в других проектах (особенности частей
 кода) затруднено, поскольку 
\begin_inset Quotes ard
\end_inset

вытащить
\begin_inset Quotes ald
\end_inset

 её, не затронув другие части программы (статические переменные, другие
 функции), очень трудно, почти невозможно.
\end_layout

\begin_layout Standard

\size larger
Реинжиниринг.
\end_layout

\begin_layout Standard

\size larger
Структурное программирование — разбиение проекта на объекты, которые содержат
 саму по себе отдельную программу и данные, с которой данная программа работает.
 Подобные объекты взаимодействуют друг с другом и, таким образом, повторное
 использование подобного объекта становится очень простым.
\end_layout

\begin_layout Standard

\size larger
Первый язык с поддержкой подобной технологии появился в 1967 году.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Что такое объектно-ориентированная парадигма?
\end_layout

\begin_layout Standard

\size larger
Признаки:
\end_layout

\begin_layout Standard

\size larger
1) Инкапсуляция;
\end_layout

\begin_layout Standard

\size larger
2) Наследование;
\end_layout

\begin_layout Standard

\size larger
3) Полиморфизм.
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Каждый class — это тип, к которому относятся какие-то объекты.
 Реализация: смотри class.cpp
\end_layout

\begin_layout Standard

\size larger
Стек - простейший класс.
 Стек - это некий объект, имеющий 2 интерфейса: push — положить что-либо
 в стек, pop — взять со стека положенное туда ранее значение.
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size larger
Конец девятой лекции
\end_layout

\begin_layout Standard

\size larger
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
Введение в компьютерную графику 
\end_layout

\begin_layout Standard

\size large
Цветовые модели RGB и CMY.
 Представляют собой задачу цвета по трехмерным координатам относительно
 выбранных координатными осями цветов.
 Причем CMY обратна RGB.
\end_layout

\begin_layout Standard

\size large
Растровая графика — графика, задаваемая по пикселям.
 Пиксель характеризуется цветом.
\end_layout

\begin_layout Standard

\size large
DPI — характеристика, показывающая число пикселей на дюйм.
\end_layout

\begin_layout Standard

\size large
Глубина цвета — сколько возможных цветов мы можем записать посредством такого-то
 числа битов памяти.
\end_layout

\begin_layout Standard

\size large
Достоинства растровой графики:
\end_layout

\begin_layout Standard

\size large
1) Она очень простая (берем и рисуем).
\end_layout

\begin_layout Standard

\size large
2) Все изображения, какие только могут быть, могут быть сохранены в таком
 формате.
\end_layout

\begin_layout Standard

\size large
Недостатки:
\end_layout

\begin_layout Standard

\size large
1) При масштабировании изображения пиксели становятся видимыми невооруженным
 глазом.(с ними можно поздороваться :) )
\end_layout

\begin_layout Standard

\size large
2) Такие изображения занимают больно дофига места.
\end_layout

\begin_layout Standard

\size large
В общем, хороший формат, но не очень.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size large
Векторная графика.
\end_layout

\begin_layout Standard

\size large
Изображение — совокупность контуров из линий, многоугольников, окружностей,
 эллипсов, текста и кривых Безье.
\end_layout

\begin_layout Standard

\size large
Как нарисовать кривую? Очевидно, что она является графиком многочлена.
 Найдя таковой многочлен, мы сможем хранить его коэффициенты, а не само
 изображение, таким образом, получается выигрыш в памяти.
\end_layout

\begin_layout Standard

\size large
Прочитать про кривые Безье.
\end_layout

\begin_layout Standard

\size large
Достоинства:
\end_layout

\begin_layout Standard

\size large
1) Размер хранимых изображений;
\end_layout

\begin_layout Standard

\size large
2) Отсутствие артефактов при зуммировании.
\end_layout

\begin_layout Standard

\size large
Недостатки:
\end_layout

\begin_layout Standard

\size large
1) Обычные (не геометрически правильные) изображения очень трудно зарисовать
 в векторном виде с помощью примитивов.
\end_layout

\begin_layout Standard

\size large
2) Перевод изображения из растра в вектор охренеть какой непростой.
\end_layout

\begin_layout Standard

\size large
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%дохрениллион
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\size large
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size large
API — интерфейс прикладного программирования.
 Интерфейс - это нечто, через что что-то взаимодействует с чем-то.
\end_layout

\begin_layout Standard

\size large
Есть различные графические библиотеки, которые позволяют взаимодействовать
 с графической подсистемой операционной системы.
\end_layout

\begin_layout Standard

\size large
Низкоуровневые операции хороши тем, что работают где угодно, но работать
 с ними очень неудобно.
\end_layout

\begin_layout Standard

\size large
Мы будем рассматривать библиотеки, входящие в фреймворк Qt.
\end_layout

\begin_layout Standard

\size large
Все, что находится в данном фреймворке, абстрагировано, что позволяет работать
 с любой ОС.
\end_layout

\begin_layout Standard

\size large
Двумерная графика в Qt реализована с помощью классов:
\end_layout

\begin_layout Standard

\size large
1) QPainter — эта хрень рисует.
\end_layout

\begin_layout Standard

\size large
2) QPaintDevice — то, на чем рисует.
\end_layout

\begin_layout Standard

\size large
3) QPaintEngine — помогает второму рисовать.
 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_body
\end_document
